#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Oct  8 03:54:24 2015
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./install_flycapture.sh
match_max 100000
expect -exact "This is a script to assist with installation of the FlyCapture2 SDK.\r
Would you like to continue and install all the FlyCapture2 SDK packages?\r
(y/n)\$ "
# Be generous
sleep 1
send -- "y\r"

expect -exact "Would you like to add a udev entry to allow access to IEEE-1394 and USB hardware?\r
If this is not ran then your cameras may be only accessible by running flycap as sudo.\r
(y/n)\$ "
# Be generous
sleep 1
send -- "y\r"

expect -exact "\r
This script will assist users in configuring their udev rules to allow\r
access to 1394 and USB devices. The script will create a udev rule which\r
will add the 1394 cards and USB devices to a group called pgrimaging.\r
The user may also choose to restart the udev daemon. All of this can be done\r
manually as well.  Please note that this script will change the permissions\r
for all IEEE1394 devices including hard drives and web cams. It will allow\r
the user to read and modify data on any IEEE1394 device.\r
\r
\r
Enter the name of the user to add to this user group.\r
\$ "
sleep 1
send -- "root\r"
expect -exact "root\r
Is this user name ok?: root\r
(y/n)\$ "
sleep 1
send -- "y\r"
expect -exact "y\r
\r
Add user root to group pgrimaging.\r
Is this ok?:\r
(y/n)\$ "
sleep 1
send -- "y\r"
expect -exact "y\r
\r
Writing the udev rules file.\r
\r
Do you want to restart the udev daemon?\r
(y/n)\$ "
sleep 1
send -- "n\r"
expect eof
